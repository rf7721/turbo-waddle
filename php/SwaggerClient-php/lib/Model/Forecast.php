<?php
/**
 * Forecast
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * home-iot-api
 *
 * The API for the EatBacon IOT project
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Forecast Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Forecast implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Forecast';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => '\DateTime',
        'pressure' => 'double',
        'humidity' => 'int',
        'wind_speed' => 'double',
        'clouds' => 'int',
        'temperature' => '\Swagger\Client\Model\ForecastTemperature',
        'weather' => '\Swagger\Client\Model\WeatherForecast'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => 'date-time',
        'pressure' => 'double',
        'humidity' => 'int32',
        'wind_speed' => 'double',
        'clouds' => 'int32',
        'temperature' => null,
        'weather' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'pressure' => 'pressure',
        'humidity' => 'humidity',
        'wind_speed' => 'windSpeed',
        'clouds' => 'clouds',
        'temperature' => 'temperature',
        'weather' => 'weather'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'pressure' => 'setPressure',
        'humidity' => 'setHumidity',
        'wind_speed' => 'setWindSpeed',
        'clouds' => 'setClouds',
        'temperature' => 'setTemperature',
        'weather' => 'setWeather'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'pressure' => 'getPressure',
        'humidity' => 'getHumidity',
        'wind_speed' => 'getWindSpeed',
        'clouds' => 'getClouds',
        'temperature' => 'getTemperature',
        'weather' => 'getWeather'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['pressure'] = isset($data['pressure']) ? $data['pressure'] : null;
        $this->container['humidity'] = isset($data['humidity']) ? $data['humidity'] : null;
        $this->container['wind_speed'] = isset($data['wind_speed']) ? $data['wind_speed'] : null;
        $this->container['clouds'] = isset($data['clouds']) ? $data['clouds'] : null;
        $this->container['temperature'] = isset($data['temperature']) ? $data['temperature'] : null;
        $this->container['weather'] = isset($data['weather']) ? $data['weather'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets pressure
     *
     * @return double
     */
    public function getPressure()
    {
        return $this->container['pressure'];
    }

    /**
     * Sets pressure
     *
     * @param double $pressure pressure
     *
     * @return $this
     */
    public function setPressure($pressure)
    {
        $this->container['pressure'] = $pressure;

        return $this;
    }

    /**
     * Gets humidity
     *
     * @return int
     */
    public function getHumidity()
    {
        return $this->container['humidity'];
    }

    /**
     * Sets humidity
     *
     * @param int $humidity humidity
     *
     * @return $this
     */
    public function setHumidity($humidity)
    {
        $this->container['humidity'] = $humidity;

        return $this;
    }

    /**
     * Gets wind_speed
     *
     * @return double
     */
    public function getWindSpeed()
    {
        return $this->container['wind_speed'];
    }

    /**
     * Sets wind_speed
     *
     * @param double $wind_speed wind_speed
     *
     * @return $this
     */
    public function setWindSpeed($wind_speed)
    {
        $this->container['wind_speed'] = $wind_speed;

        return $this;
    }

    /**
     * Gets clouds
     *
     * @return int
     */
    public function getClouds()
    {
        return $this->container['clouds'];
    }

    /**
     * Sets clouds
     *
     * @param int $clouds clouds
     *
     * @return $this
     */
    public function setClouds($clouds)
    {
        $this->container['clouds'] = $clouds;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return \Swagger\Client\Model\ForecastTemperature
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param \Swagger\Client\Model\ForecastTemperature $temperature temperature
     *
     * @return $this
     */
    public function setTemperature($temperature)
    {
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets weather
     *
     * @return \Swagger\Client\Model\WeatherForecast
     */
    public function getWeather()
    {
        return $this->container['weather'];
    }

    /**
     * Sets weather
     *
     * @param \Swagger\Client\Model\WeatherForecast $weather weather
     *
     * @return $this
     */
    public function setWeather($weather)
    {
        $this->container['weather'] = $weather;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


